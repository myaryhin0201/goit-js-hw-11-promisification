{"version":3,"sources":["webpack:///./js/main.js","webpack:///./data/users.js","webpack:///./js/second.js","webpack:///./js/third.js"],"names":["console","log","delay","ms","Promise","resolve","reject","setTimeout","logger","time","then","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","users","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"gIAGCA,QAAQC,IAAR,YACD,IAAMC,EAAQ,SAAAC,GAMZ,OALgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACTF,EAAQF,KACPA,OAKDK,EAAS,SAAAC,GAAI,OAAIT,QAAQC,IAAR,kBAA8BQ,EAA9B,OAEvBP,EAAM,KAAMQ,KAAKF,GACjBN,EAAM,KAAMQ,KAAKF,GACjBN,EAAM,MAAMQ,KAAKF,G,kCCjBF,GACb,CAAEG,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,ICHzBL,YAAW,WACTP,QAAQC,IAAR,cACC,MACH,IAAMY,EAAkB,SAACC,EAAUC,GAQjC,OAPgB,IAAIX,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACNF,EAAQS,EAASE,KAAI,SAAAC,GAAI,OAC9BA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,QAE3D,UAIAT,EAAS,SAAAU,GAAY,OAAIlB,QAAQmB,MAAMD,IAC7CL,EAAgBO,EAAO,SAASV,KAAKF,GACrCK,EAAgBO,EAAO,OAAOV,KAAKF,GChBnCD,YAAW,WACTP,QAAQC,IAAR,cACC,KACH,IAGMoB,EAAkB,SAACC,GACrB,IAJ+BC,EAAKC,EAI9BtB,GAJyBqB,EAIS,IAJJC,EAIS,IAHxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAclD,OAVgB,IAAInB,SAAQ,SAACC,EAASC,GACtCC,YAAW,WACQkB,KAAKE,SAAW,GAE3BtB,EAAQ,CAACiB,EAAYM,GAAI1B,IAEzBI,EAAOgB,EAAYM,MAEzB1B,EAAM,UAIN2B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAVnB,EAAU,KACjCT,QAAQC,IAAR,eAA2B2B,EAA3B,iBAA8CnB,EAA9C,OAGIqB,EAAW,SAAAF,GACf5B,QAAQ+B,KAAR,gCAA6CH,EAA7C,8BAEFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,I","file":"main.d4d78b32fc45b9a17db1.js","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \r\n// \"resolved\" через ms миллисекунд.Значением исполнившегося промиса должно быть то кол - \r\n// во миллисекунд которое передали во время вызова функции delay.\r\n console.log(`Задача 1`);\r\nconst delay = ms => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n  return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","export default [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];","import users from '../data/users';\r\nsetTimeout(() => {\r\n  console.log(`Задача 2`);\r\n}, 2250);\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n         resolve(allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n    ));\r\n    },2500)\r\n  });\r\n  return promise;\r\n};\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","setTimeout(() => {\r\n  console.log(`Задача 3`);\r\n}, 3000);\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n        if (canProcess) {\r\n            resolve([transaction.id, delay]);\r\n        } else {\r\n            reject(transaction.id)\r\n        }\r\n  }, (delay+3250));\r\n    });\r\n    return promise;\r\n};\r\nconst logSuccess = ([id, time]) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}